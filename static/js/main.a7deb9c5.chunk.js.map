{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","AddTodo","onCreate","useState","value","setValue","onSubmit","e","preventDefault","trim","target","App","setTodos","Provider","filter","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8KAIeA,EAFCC,IAAMC,gBCGhBC,EAAS,CACXC,GAAI,CACAC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,QAAS,aACTC,OAAQ,iBACRC,aAAc,MACdC,aAAc,SAGlBC,MAAO,CACHC,YAAa,SAwCNC,MApCf,YAA8C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAGtBC,EAAcC,qBAAWnB,GAAzBkB,WAEDE,EAAU,GAMhB,OAJGL,EAAKM,WACJD,EAAQE,KAAK,QAIb,wBAAIC,MAASpB,EAAOC,IAChB,0BAAMoB,UAAYJ,EAAQK,KAAK,MAC3B,2BACAC,KAAO,WACPC,QAAWZ,EAAKM,UAChBE,MAAQpB,EAAOS,MACfK,SAAW,kBAAMA,EAASF,EAAKa,OAE/B,gCAAUZ,EAAO,GAPrB,OASKD,EAAKc,OAEV,4BAAQL,UAAY,KAAKM,QAAW,kBAAMZ,EAAWH,EAAKa,MAA1D,UCxCNzB,EAAS,CACX4B,GAAI,CACAC,UAAW,OACXC,OAAQ,EACRzB,QAAS,IA8BF0B,MA1Bf,SAAkBC,GACd,OACI,wBAAIZ,MAASpB,EAAO4B,IACdI,EAAMC,MAAMC,KAAK,SAACtB,EAAMC,GAEtB,OACA,kBAAC,EAAD,CACAD,KAAQA,EACRuB,IAAOvB,EAAKa,GACZZ,MAASA,EACTC,SAAYkB,EAAMI,gBCMnBC,MA1Bf,YAA8B,IAAXC,EAAU,EAAVA,SAAU,EAECC,mBAAS,IAFV,mBAElBC,EAFkB,KAEXC,EAFW,KAazB,OACI,0BAAMrB,MAAQ,CAACU,OAAQ,QAASY,SAVpC,SAAuBC,GACnBA,EAAEC,iBAECJ,EAAMK,SACLP,EAASE,GACTC,EAAS,OAMT,2BAAOD,MAASA,EAAQ1B,SAAY,SAAA6B,GAAC,OAAIF,EAASE,EAAEG,OAAON,UAC3D,4BAAQjB,KAAO,UAAf,cC+BGwB,MA5Cf,WAAgB,IAAD,EAEajD,IAAMyC,SAAS,CACvC,CAACd,GAAI,EAAGP,WAAW,EAAOQ,MAAO,iEACjC,CAACD,GAAI,EAAGP,WAAW,EAAOQ,MAAO,uEACjC,CAACD,GAAI,EAAGP,WAAW,EAAOQ,MAAO,+EALtB,mBAENO,EAFM,KAECe,EAFD,KA+Bb,OACE,kBAAC,EAAQC,SAAT,CAAkBT,MAAS,CAACzB,WAb9B,SAAoBU,GAClBuB,EAASf,EAAMiB,QAAO,SAAAtC,GAAI,OAAIA,EAAKa,KAAOA,SAc1C,yBAAKJ,UAAY,WACf,wBAAIA,UAAY,UAAhB,kBACA,kBAAC,EAAD,CAASiB,SAbb,SAAiBZ,GACfsB,EAASf,EAAMkB,OAAO,CAAC,CACrBzB,MAAOA,EACPD,GAAI2B,KAAKC,MACTnC,WAAW,SAUVe,EAAMqB,OAAS,kBAAC,EAAD,CAAUrB,MAASA,EAAOG,SA7B9C,SAAoBX,GAClBuB,EACCf,EAAMC,KAAK,SAAAtB,GAIR,OAHIA,EAAKa,KAAOA,IACdb,EAAKM,WAAaN,EAAKM,WAElBN,SAuB8D,0CC/BzD2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a7deb9c5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context","import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Context from '../context';\r\n\r\n\r\nconst styles = {\r\n    li: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        padding: '.5rem 1rem',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '4px',\r\n        marginBottom: '.5rem'\r\n    },\r\n\r\n    input: {\r\n        marginRight: '1rem'\r\n    }\r\n}\r\n\r\nfunction TodoItem({ todo, index, onChange }) {\r\n    //console.log( 'todo', todo)\r\n    \r\n    const {removeTodo} = useContext(Context);\r\n\r\n    const classes = []\r\n\r\n    if(todo.completed){\r\n        classes.push('done')\r\n    }\r\n\r\n    return (\r\n        <li style = {styles.li}> \r\n            <span className ={classes.join(' ')}>\r\n                <input \r\n                type = \"checkbox\" \r\n                checked = {todo.completed}\r\n                style ={styles.input} \r\n                onChange= {() => onChange(todo.id)} \r\n                />\r\n                <strong>{ index +1 }</strong>\r\n                &nbsp; \r\n                {todo.title}\r\n            </span>\r\n            <button className = 'rm' onClick = {() => removeTodo(todo.id)}>&times;</button> \r\n        </li>\r\n    )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TodoItem from './TodoItem';\r\n\r\n\r\nconst styles = {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0, \r\n        padding: 0\r\n    }\r\n}\r\n\r\nfunction TodoList(props) {\r\n    return (\r\n        <ul style = {styles.ul}>\r\n            { props.todos.map( (todo, index) => {\r\n\r\n                return (\r\n                <TodoItem \r\n                todo = {todo} \r\n                key = {todo.id} \r\n                index = {index} \r\n                onChange = {props.onToggle} \r\n            \r\n                />\r\n                )\r\n\r\n            }) }\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AddTodo( {onCreate}){\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    function submitHandler(e) {\r\n        e.preventDefault();\r\n\r\n        if(value.trim()){\r\n            onCreate(value)\r\n            setValue('')\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form style ={{margin: '2rem'}} onSubmit = {submitHandler}  >\r\n            <input value = {value}  onChange = {e => setValue(e.target.value)} />\r\n            <button type = \"submit\">Add Todo</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddTodo.propTypes = {\r\n    onCreate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\nimport TodoList from './Todo/TodoList';\nimport Context from './context';\nimport AddTodo from './Todo/AddTodo';\n\n\nfunction App() {\n\n  const [todos, setTodos] = React.useState([\n    {id: 1, completed: false, title: 'Купить хлеб'},\n    {id: 2, completed: false, title: 'Купить масло'},\n    {id: 3, completed: false, title: 'Купить молоко'},\n  ])\n\n  function toggleTodo(id){\n    setTodos(\n     todos.map( todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n    )\n  }\n\n  function removeTodo(id){\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title){\n    setTodos(todos.concat([{\n      title: title, \n      id: Date.now(),\n      completed: false \n    }]))\n  }\n\n  return (\n    <Context.Provider value = {{removeTodo: removeTodo}}>\n\n    <div className = 'wrapper'>\n      <h1 className = \"header\">React tutorial</h1>\n      <AddTodo onCreate = {addTodo} />\n      {todos.length ? <TodoList todos = {todos} onToggle = {toggleTodo} /> : <p>No todos</p>}\n    </div>\n\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}